class Solution {
public:
	bool isPossible(int N, vector<pair<int, int> >& prerequisites) {
	    vector<int> adj[N];
	    //convert into adj 
	    for(auto it: prerequisites){
	        adj[it.first].push_back(it.second); 
	    }
	    //calculate the degree
	    int inDegree[N] = {0};
	    for(int i=0;i<N;i++){
	        for(auto it: adj[i]){
	            inDegree[it]++;
	        }
	    }
	    //initially push into the queue if degree == 0
	    queue<int> q;
	    for(int i=0;i<N;i++){
	        if(inDegree[i] == 0){
	            q.push(i);
	        }
	    }
	    vector<int> topo;
	    //node is in your topo sort so please remove it from inDegree
	    while(!q.empty()){
	        int node = q.front();
	        q.pop();
	        topo.push_back(node);
	        for(auto it: adj[node]){
	            inDegree[it]--;
	            if(inDegree[it] == 0) q.push(it);
	        }
	    }
	    
	    if(topo.size() == N) return true;
	    return false;
	}
};
