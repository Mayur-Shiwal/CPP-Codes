#include <iostream>
#include <queue>

using namespace std;

class Node{

public:
    int data;
    Node* left;
    Node* right;

    Node(int d){
        this->data = d;
        this->right = NULL;
        this->left = NULL;
    }

};

void levelOrderTraversal(Node* root){

    queue<Node*> q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        Node* frontNode = q.front();
        q.pop();
        if(frontNode == NULL){
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
            cout<<frontNode->data<<" ";
            if(frontNode->left){
                q.push(frontNode->left);
            }
            if(frontNode->right){
                q.push(frontNode->right);
            }
        }
    }

}

Node* insertIntoBST(Node* root, int data){

    if(root == NULL){
        root = new Node(data);
        return root;
    }
    if(data>root->data){
        //right part me jana hai
        root->right = insertIntoBST(root->right,data);
    }
    else{
        //left part me jana hai
        root->left = insertIntoBST(root->left,data);
    }
    return root;

}

void takeInput(Node* &root){
    int data;
    cin>>data;

    while(data!=-1){
        root = insertIntoBST(root,data);
        cin>>data;
    }
}

int main()
{
    Node* root = NULL;
    cout<<"Enter data to create BST: "<<endl;
    takeInput(root);
    cout<<"Printing the BST: "<<endl;
    levelOrderTraversal(root);

    //we can print inorder preorder postorder from previous tree implementation

    return 0;
}
