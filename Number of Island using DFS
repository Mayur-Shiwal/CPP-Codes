class Solution {
  private:
  void bfs(int row, int col, vector<vector<int>> &vis, vector<vector<char>> &grid){
      vis[row][col] = 1;
      int n = grid.size();
      int m = grid[0].size();
      queue<pair<int, int>> q;
      q.push({row, col});
      while(!q.empty()){
          int row = q.front().first;
          int col = q.front().second;
          q.pop();
          //traverse in the neightbour ans mark them as 1 i.e visited
          for(int delrow = -1;delrow<=1;delrow++){
              for(int delcol = -1;delcol<=1;delcol++){
                  //if(abs(delrow) == abs(delcol)) continue;   this is for only horizontal ans vertical movement
                  int nrow = row+delrow;
                  int ncol = col+delcol;
                  //check for validity then land and then whether its visited or not
                  if(nrow>=0 && nrow<n && ncol>=0 && ncol<m 
                  && grid[nrow][ncol] == '1' && !vis[nrow][ncol]){
                    vis[nrow][ncol] = 1;
                    q.push({nrow,ncol});
                  }
              }
          }
      }
  }
  
  public:
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m,0));
        int count = 0;
        for(int row=0;row<n;row++){
            for(int col=0;col<m;col++){
                if(!vis[row][col] && grid[row][col] == '1'){
                    count++;
                    bfs(row, col, vis, grid);
                }
            }
        }
        return count;
    }
};
