
// int f(int day, int last, vector<vector<int>> &points, vector<vector<int>> &dp){
//     if(day == 0){
//         int maxi = 0;
//         for(int t=0;t<3;t++){
//             if(t!=last){
//                 maxi = max(maxi, points[0][t]);
//             }
//         }
//         return maxi;
//     }
//     if(dp[day][last] != -1) return dp[day][last];
//     int maxi = 0;
//     for(int t=0;t<3;t++){
//         if(t!=last){
//             int pnts = points[day][t] + f(day-1, t, points, dp);
//             maxi = max(pnts, maxi);
//         }
//     }
//     return dp[day][last] = maxi;
// }

int ninjaTraining(int n, vector<vector<int>> &points)
{
//     vector<vector<int>> dp(n, vector<int>(4, -1));
//     return f(n-1, 3, points, dp);
    // Write your code here.
    
//     tabulation method 
    vector<vector<int>> dp(n, vector<int>(4, 0));
    dp[0][0] = max(points[0][1], points[0][2]);
    dp[0][1] = max(points[0][0], points[0][2]);
    dp[0][2] = max(points[0][0], points[0][1]);
    dp[0][3] = max(points[0][0], max(points[0][1],points[0][2]));
    
    for(int day=1;day<n;day++){
        for(int last=0;last<4;last++){
            dp[day][last] = 0;
            for(int t=0;t<3;t++){
                if(t!=last){
                    int pnts = points[day][t] + dp[day-1][t];
                    dp[day][last] = max(dp[day][last], pnts);
                }
            }
        }
    }
    return dp[n-1][3];
}
