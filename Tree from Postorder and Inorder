struct Node
{
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x){
        data = x;
        left = right = NULL;
    }
};*/

//Function to return a tree created from postorder and inoreder traversals.

int findPosition(int in[],int element, int n){
    for(int i=0;i<n;i++){
        if(in[i] == element){
            return i;
        }
    }
    return -1;
}

Node* solve(int in[], int post[], int &postOrderIndex,int instart,int inend,int n){
    if(postOrderIndex<0 || instart>inend){
        return NULL;
    }
    int element = post[postOrderIndex--];
    Node* root = new Node(element);
    int position = findPosition(in,element,n);
    
    // recursive calls
    root->right = solve(in,post,postOrderIndex,position+1,inend,n);
    root->left = solve(in,post,postOrderIndex,instart,position-1,n);

    return root;
}

Node *buildTree(int in[], int post[], int n) {
    int postOrderIndex = n-1;
    Node* ans = solve(in,post,postOrderIndex,0,n-1,n);
    return ans;
}
