node* findMid(node* head){
    //tortoise and hare Approach
    node* fast = head->next;
    node* slow = head;
    
    while(fast!=NULL && fast->next!=NULL){
        slow=slow->next;
        fast = fast->next->next;
    }
    return slow;
}

node* merge(node* left, node* right){
    if(left == NULL){
        return right;
    }
    if(right == NULL){
        return left;
    }
    node* ans = new node(-1);
    node* temp = ans;
    
    //merge two sorted Linked list
    while(left!=NULL && right != NULL){
        if(left->data < right->data){
            temp->next = left;
            temp = left;
            left = left->next;
        }
        else{
            temp->next = right;
            temp = right;
            right = right -> next;
        }
    }
    while(left!=NULL){
        temp->next = left;
        temp = left;
        left = left->next;
    }
    while(right != NULL){
        temp->next = right;
        temp = right;
        right = right->next;
    }
    ans = ans->next;
    return ans;
}

node* mergeSort(node *head) {
    //base case
    if(head == NULL || head->next == NULL){
        return head;
    }
    //devide Linked list in two equal parts after finding mid
    node* mid = findMid(head);
    
    node* leftHalf = head;
    node* rightHalf = mid->next;
    mid->next = NULL;
    
    //sort left and right using recursion
    leftHalf = mergeSort(leftHalf);
    rightHalf = mergeSort(rightHalf);
    
    //now merge both sorted Linked List
    node* result = merge(leftHalf,rightHalf);
    
    return result;
}
