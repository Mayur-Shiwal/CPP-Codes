void dfs(int node, unordered_map<int, bool> &vis, unordered_map<int, list<int>> &adj, vector<int> &ans){
    vis[node] = true;
    ans.push_back(node);
    for(auto it: adj[node]){
        if(!vis[it]){
            dfs(it, vis, adj, ans);
        }
    }
}

vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    //prepare Adjecency list
    unordered_map<int, list<int>> adj;
    for(int i=0; i<edges.size(); i++){
        int u = edges[i][0];
        int v = edges[i][1];
        
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    vector<vector<int>> ans;
    unordered_map<int, bool> vis;
    for(int i=0;i<V;i++){
        if(!vis[i]){
            vector<int> temp;
            dfs(i, vis, adj, temp);
            ans.push_back(temp);
        }
    }
    return ans;
}
