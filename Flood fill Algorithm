class Solution {
private:
    void dfs(int row, int col, int initialColor, vector<vector<int>> &ans,
            vector<vector<int>> &image, int newColor){
        ans[row][col] = newColor;
        int n = image.size();
        int m = image[0].size();
        for(int delrow = -1;delrow<=1;delrow++){
            for(int delcol = -1;delcol<=1;delcol++){
                if(abs(delrow) == abs(delcol)){
                    continue;
                }
                int nrow = row+delrow;
                int ncol = col+delcol;
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && 
                    image[nrow][ncol] == initialColor && ans[nrow][ncol] != newColor){
                        dfs(nrow,ncol,initialColor,ans,image,newColor);
                }
            }
        }
    }
    
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        int initialColor = image[sr][sc];
        vector<vector<int>> ans = image;
        dfs(sr, sc, initialColor, ans, image, newColor);
        return ans;
    }
};
